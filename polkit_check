#!/bin/bash
clear
echo ""
echo ""
echo "   #########################################################"
echo "   #                                                       #"
echo "   #   Polkit CVE-2021-4034 Fix Check                      #"
echo "   #   By R0dznCL                                          #"
echo "   #                                                       #"
echo "   #########################################################"
echo ""
echo ""
echo ""

#### Vars
# This option sets the number of tests per host. 
# The host must block attempts before the threshold is exceeded. 
# By default the parameter is set to 6, this to comply with good industry practices (6 connection attempts maximum)


temp_file="/tmp/polkit_chk.tmp"
host_timeout="5"
nmap_timeout="2"
date_inform=$(date +%Y-%m-%d-%H-%M-%S)
ssh_user=""
ssh_password=""

## Check Deps

touch "$temp_file"

if [ -z "$ssh_user" ];then
	echo "ERROR - Var ssh_user is Empty, please edit the Script"
	sleep 5
	exit
fi

if [ -z "$ssh_password" ];then
        echo "ERROR - Var ssh_password is Empty, please edit the Script"
        sleep 5
        exit
fi



#Check SSHPASS
check_sshpass=$(sshpass -V | grep -w "sshpass")
	if [ -z "$check_sshpass" ]; then
		echo "Error - sshpass not found, please install sshpass"
		exit
	fi

#Check NMAP
check_nmap=$(nmap -V | grep -w "Nmap")
        if [ -z "$check_nmap" ]; then 
                echo "Error - nmap not found, please install nmap"
                exit
        fi

#Check SED
check_sed=$(sed --version | grep -w "sed")
        if [ -z "$check_sed" ]; then 
                echo "Error - sed not found, please install sed"
                exit
        fi

#Check BC
check_bc=$(bc -v | grep -w "bc")
        if [ -z "$check_bc" ]; then 
                echo "Error - bc not found, please install bc"
                exit
        fi



#Set VARS From ARGS
while getopts ":c:n:p:o:" option
	do

		case ${option} in
		n)
			n=${OPTARG}
		;;
		p)
			p=${OPTARG}
		;;

		*)
		echo " Usage:  polkit_check -n [network/host] -p [port SSH (Default Auto)]"
		;;
		esac
	done


if [ -z "$n" ]; then
        echo " Error , -n option is Empty "
	sleep 10
fi


# Search HOST with Wopen ports 
if [ -z "$p" ]; then

	echo "		Exploring HOST/NETWORK $n ...."
	echo ""
	nmap -Pn --host-timeout "$nmap_timeout" -v $n | grep "Discovered" | awk '{ print $4,$6}' > "$temp_file"
	sed -i 's%/tcp%%g' "$temp_file"
else

	echo "          Exploring HOST/NETWORK $n .... port -> $p"
        echo ""
        nmap -Pn --host-timeout "$nmap_timeout" -p "$p" -v $n | grep "Discovered" | awk '{ print $4,$6}' > "temp_file"
        sed -i 's%/tcp%%g' "temp_file"

fi

#Count how many host have open ports
nlines=$(wc -l "$temp_file" | awk '{ print $1}')


#Set Value of counter to 1
count=1



if [ "$nlines" -eq 0 ];then
	echo "....Host/Network no found "
	exit
fi


echo  " Searching SSH Services..."

	touch "$date_inform.txt"
        echo "          Remote Polkit CVE-2021-4034 Ckeck - Inform" >> "$date_inform".txt
        echo "          Ref: Date $date_inform" >> "$date_inform".txt
        echo "" >> "$date_inform".txt
        echo "" >> "$date_inform".txt


function test_polkit {

	host=$(sed -n "$count"p $temp_file | awk '{ print $2}')
	port=$(sed -n "$count"p $temp_file | awk '{ print $1}')
	ssh_detect=$(nmap -sV -Pn --host-timeout "$nmap_timeout" -p $port $host | grep -w "OpenSSH")

	if [ -z "$ssh_detect" ]; then
		ssh_detect=$(nmap -sV -Pn --host-timeout "$nmap_timeout" -p $port $host | grep -w "sshd" )
	fi

	if [ -n "$ssh_detect" ];then

	echo " Testing $host on port $port ....."

	validate_login=$(sshpass -p $ssh_password ssh -p $port -o StrictHostKeyChecking=no $ssh_user@$host stat -c '%a' $(which pkexec))

	if [ -n "$validate_login" ];then

		search_bin=$(sshpass -p $ssh_password ssh -p $port -o StrictHostKeyChecking=no $ssh_user@$host stat -c '%a' $(which pkexec) | grep -w 4755)

			if [ -n "$search_bin" ]; then
				echo "	HOST $host is Vulnerable" >> $date_inform.txt
				echo ""
				echo " HOST $host is Vulnerable"
				sleep 5
			fi

	else

	echo " HOST $host Connection Error o PKEXEC not found"
	echo " HOST $host Connection Error o PKEXEC not found" >> $date_inform.txt

	fi
	fi

	}


echo ""
	while [ $count -le $nlines ] 
	do

	div=$(echo  "scale=2; $count/$nlines" | bc)
	div=$(echo  "$div*100" | bc | awk -F "." '{ print $1}' )

	test_polkit


	if [ "$div" -ge 5 ]; then
	echo -ne ' !!!!!                                                                                                             (5%)\r'
	fi
	if [ "$div" -ge 10 ]; then
        echo -ne ' !!!!!!!!!!                                                                                                        (10%)\r'
        fi
        if [ "$div" -ge 20 ]; then
        echo -ne ' !!!!!!!!!!!!!!!!!!!!                                                                                              (20%)\r'
        fi
	if [ "$div" -ge 30 ]; then
        echo -ne ' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                                                                    (30%)\r'
        fi
	if [ "$div" -ge 40 ]; then
        echo -ne ' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                                                          (40%)\r'
        fi
	if [ "$div" -ge 50 ]; then
        echo -ne ' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                                                (50%)\r'
        fi
	if [ "$div" -ge 60 ]; then
        echo -ne '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                                      (60%)\r'
        fi
	if [ "$div" -ge 70 ]; then
        echo -ne '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                            (70%)\r'
        fi
	if [ "$div" -ge 80 ]; then
        echo -ne '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                  (80%)\r'
        fi
	if [ "$div" -ge 90 ]; then
        echo -ne '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                        (90%)\r'
        fi
	if [ "$div" -ge 100 ]; then
        echo -ne '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!              (100%)\r'
        fi
	let count=$count+1
	sleep 1
	done

	echo ""
	echo "		You can see the inform in $date_inform.txt File	"
	sleep 5
